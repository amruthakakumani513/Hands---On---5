

class MinHeap:
    def __init__(self):
        self.heap = []

    def parent(self, index):
        return (index - 1) >> 1

    def left(self, index):
        return (index << 1) + 1

    def right(self, index):
        return (index << 1) + 2

    def heapify_up(self, index):
        while index > 0 and self.heap[index] < self.heap[self.parent(index)]:
            self.heap[index], self.heap[self.parent(index)] = self.heap[self.parent(index)], self.heap[index]
            index = self.parent(index)

    def heapify_down(self, index):
        smallest = index
        left_child = self.left(index)
        right_child = self.right(index)

        if left_child < len(self.heap) and self.heap[left_child] < self.heap[smallest]:
            smallest = left_child
        if right_child < len(self.heap) and self.heap[right_child] < self.heap[smallest]:
            smallest = right_child

        if smallest != index:
            self.heap[index], self.heap[smallest] = self.heap[smallest], self.heap[index]
            self.heapify_down(smallest)

    def build_min_heap(self, arr):
        self.heap = arr
        for i in range(len(arr) // 2, -1, -1):
            self.heapify_down(i)

    def insert(self, value):
        self.heap.append(value)
        self.heapify_up(len(self.heap) - 1)

    def pop_root(self):
        if not self.heap:
            return None
        if len(self.heap) == 1:
            return self.heap.pop()
        root = self.heap[0]
        self.heap[0] = self.heap.pop()
        self.heapify_down(0)
        return root


# Example usage:
if __name__ == "__main__":
    heap = MinHeap()
    heap.build_min_heap([1,2,3,6,9,5,10,14])

    print("Initial Min Heap:", heap.heap)

    heap.insert(12)
    print("After insertion of 12:", heap.heap)

    popped = heap.pop_root()
    print("Popped root node:", popped)
    print("Heap after popping root node:", heap.heap)




     
